<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="12" time="386.495" timestamp="2022-05-25T20:12:49.125643" hostname="Steamship.local"><testcase classname="tests.tests.plugin.integration.test_e2e_blockifier" name="test_e2e_blockifier_plugin" time="29.401" /><testcase classname="tests.tests.plugin.integration.test_e2e_configurable_tagger" name="test_e2e_parser" time="28.973" /><testcase classname="tests.tests.plugin.integration.test_e2e_corpus_export" name="test_e2e_corpus_export" time="32.920" /><testcase classname="tests.tests.plugin.integration.test_e2e_corpus_export" name="test_e2e_corpus_export_with_query" time="6.165" /><testcase classname="tests.tests.plugin.integration.test_e2e_corpus_importer" name="test_e2e_corpus_importer" time="39.221" /><testcase classname="tests.tests.plugin.integration.test_e2e_csv_blockifier" name="test_e2e_csv_blockifier_plugin" time="29.696" /><testcase classname="tests.tests.plugin.integration.test_e2e_embedder" name="test_e2e_embedder" time="35.945" /><testcase classname="tests.tests.plugin.integration.test_e2e_file_importer" name="test_e2e_importer" time="31.290" /><testcase classname="tests.tests.plugin.integration.test_e2e_get_training_parameters" name="test_get_training_parameters" time="26.653" /><testcase classname="tests.tests.plugin.integration.test_e2e_tagger" name="test_e2e_tagger" time="36.718" /><testcase classname="tests.tests.plugin.integration.test_e2e_trainable_tagger" name="test_e2e_trainable_tagger_lambda_training" time="57.867"><failure message="steamship.base.error.SteamshipError: The file at signed URL https://steamship-spaces-staging.s3.us-west-2.amazonaws.com/spaces/658B0ABB-DA53-496D-9FE5-E0631CA5DEF2/A68F3EC9-3FCF-4E3D-932E-D9167AEA6E13/pluginData/4B9D11B4-FF7C-46E8-88F3-6902373C3143/default.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAYRUKYC4IE6VKSVWF%2F20220526%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220526T001843Z&amp;X-Amz-Expires=86400&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEK7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDlMczAHnFOpUcR%2BR2BRuQlIum4B7tFEn%2BrAxTDxF188AIhAO7BZnw%2B4JhkBdM5E3LstZArQLzDqgxRr08%2BAnxQ%2F56wKoAECJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQABoMNTg3NjI3NzYzNDcyIgwjUN4I1M8KDDitD3kq1APRuDR8tM5fJVYX3mMLQPl%2FHAtQtvq%2FEw6UUlAD6eFGeddT6nW1oLX10NBVW7isUywyJlj9OBRC%2FHLAnrsgGADlROXanOkPmvM0Xh2S6sV20qW10eQ53M4NdWYJ4%2BeLksY5FHPLLYELP86b3LlHa%2F5iobCIzgdOywxEMlHndXLO0PMCK7qKyfBzucPzGpsPJ13fcCxuYVCMTxqKh5gcPEEdkiLfhLWKdEMbGUIQYtAdg4vxOemQ8PYf8F4yjY%2BpJYox1IvKEUN%2BdtZ5q4tqdldr4xhqvNHu4c2nAd6mpVtqDuRv6Y3ekbZqtGx1hjFlXq4Hc4JhkRR9LpNniPlle29d71yO9UxoZisj9JBMz3zfWuZaaCBhybsQrdhOmUEw0cavZxdXdnjhqfkQLXhwTxVtovJZb6lDr8zKt%2F%2BUUbSLkhXVwYCUdybNrLcsYD96QgnF4oRTCpCmWiPcRYefsN4yKJOQZEVYobMIcBzmATChtMu57U75WVT53BM9%2F0MhCQkDixuvrGYL0NkDsYHavOxRDpSZR%2BxK4i29ZUC9nkQyS71ul5MootYRu8BofyGH23PAeV4kScV2gnzAjkx8M%2BX%2FQd%2BfsW9PXF2LLT1tSI9xYucDP5Iws8G6lAY6pAH0sC%2FAJeUZRoT1oRQ4E%2Ffw5VeEx1jFl7cleqOdvqbcylYUFFlxF6DtecIejcGCIXw9VdjgYnLInbRZADqem5Gvz1AcHjeMayBmtxy%2FaDKr7ELLPYAJgVfA7mbIIkbzffevb76GjfgWjzmxObm8PjoBp7TRo%2BFlqdX1UIGJlXCYFa5Oi8W2ZPB8bauh9Uf4YPwFrKA2KVncy%2FPuvWB9dNT2yNvSAw%3D%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=26587c00fe91fa77036aef8ce031a95d328d9b750fefd5413e0c6c28e31ca6e9 did not exist. HTTP 404. Content: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;Error&gt;&lt;Code&gt;NoSuchKey&lt;/Code&gt;&lt;Message&gt;The specified key does not exist.&lt;/Message&gt;&lt;Key&gt;spaces/658B0ABB-DA53-496D-9FE5-E0631CA5DEF2/A68F3EC9-3FCF-4E3D-932E-D9167AEA6E13/pluginData/4B9D11B4-FF7C-46E8-88F3-6902373C3143/default.zip&lt;/Key&gt;&lt;RequestId&gt;JP3QNCQ0HBS62VJB&lt;/RequestId&gt;&lt;HostId&gt;bVPaRcNnaakvI8/3cc4UYhL7CC4Slyj2qa2FvcGVAsJcpg7MAmWic5J4uEVv6f1+xDVRcmNCuPc=&lt;/HostId&gt;&lt;/Error&gt;">def test_e2e_trainable_tagger_lambda_training():
        client = get_steamship_client()
        spaceR = Space.get(client)
        assert spaceR.data is not None
        space = spaceR.data
    
        version_config_template = dict(
            text_column=dict(type="string"),
            tag_columns=dict(type="string"),
            tag_kind=dict(type="string"),
        )
        instance_config = dict(text_column="Message", tag_columns="Category", tag_kind="Intent")
    
        exporter_plugin_r = PluginInstance.create(
            client=client,
            handle=EXPORTER_HANDLE,
            plugin_handle=EXPORTER_HANDLE,
            upsert=True,
        )
        assert exporter_plugin_r.data is not None
        exporter_plugin = exporter_plugin_r.data
        assert exporter_plugin.handle is not None
    
        csv_blockifier_path = PLUGINS_PATH / "blockifiers" / "csv_blockifier.py"
        trainable_tagger_path = PLUGINS_PATH / "taggers" / "plugin_trainable_tagger.py"
    
        # Make a blockifier which will generate our trainable corpus
        with deploy_plugin(
            client,
            csv_blockifier_path,
            "blockifier",
            version_config_template=version_config_template,
            instance_config=instance_config,
        ) as (plugin, version, instance):
            with upload_file(client, "utterances.csv") as file:
                assert len(file.refresh().data.blocks) == 0
                # Use the plugin we just registered
                file.blockify(plugin_instance=instance.handle).wait()
                assert len(file.refresh().data.blocks) == 5
    
                # Now make a trainable tagger to train on those tags
                with deploy_plugin(
                    client, trainable_tagger_path, "tagger", training_platform=HostingType.LAMBDA
                ) as (tagger, tagger_version, tagger_instance):
                    # Now train the plugin
                    training_request = TrainingParameterPluginInput(
                        plugin_instance=tagger_instance.handle,
                        export_request=ExportPluginInput(
                            plugin_instance=EXPORTER_HANDLE, type="corpus", handle="default"
                        ),
                        training_params=dict(
                            keyword_list=KEYWORDS  # This is a key defined by the test model we're training
                        ),
                    )
    
                    train_result = tagger_instance.train(training_request)
                    train_result.wait()
    
                    # At this point, the PluginInstance will have written a parameter file to disk. We should be able to
                    # retrieve it since we know that it is tagged as the `default`.
    
                    checkpoint = ModelCheckpoint(
                        client=client,
                        handle="default",
                        plugin_instance_id=tagger_instance.id,
                    )
&gt;                   checkpoint_path = checkpoint.download_model_bundle()

test_e2e_trainable_tagger.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../src/steamship/plugin/outputs/model_checkpoint.py:111: in download_model_bundle
    download_from_signed_url(download_resp.data.signedUrl, to_file=self.archive_path_on_disk())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

url = 'https://steamship-spaces-staging.s3.us-west-2.amazonaws.com/spaces/658B0ABB-DA53-496D-9FE5-E0631CA5DEF2/A68F3EC9-3FCF...yNvSAw%3D%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=26587c00fe91fa77036aef8ce031a95d328d9b750fefd5413e0c6c28e31ca6e9'
to_file = PosixPath('/var/folders/lg/s9f7mp_90v768ds8bsjq_sdm0000gn/T/tmpuq3nte0s/default.zip')

    def download_from_signed_url(url: str, to_file: Path = None) -&gt; Path:
        """
        Downloads the Signed URL to the filename `desired_filename` in a temporary directory on disk.
        """
        url = apply_localstack_url_fix(url)
        logging.info(f"Downloading: {url} to {to_file} in a temporary directory")
    
        resp = requests.get(url)
        if resp.status_code != 200:
            # TODO: At least Localstack seend to reply with HTTP 200 even if the file isn't found!
            # The full response contains:
            # &lt;Error&gt;
            #     &lt;Code&gt;NoSuchKey&lt;/Code&gt;
            # So we **could** check the response text even in the event of 200 but that seems wrong..
            if "&lt;Code&gt;NoSuchKey&lt;/Code&gt;" in resp.text:
&gt;               raise SteamshipError(
                    message=f"The file at signed URL {url} did not exist. HTTP {resp.status_code}. Content: {resp.text}"
                )
E               steamship.base.error.SteamshipError: The file at signed URL https://steamship-spaces-staging.s3.us-west-2.amazonaws.com/spaces/658B0ABB-DA53-496D-9FE5-E0631CA5DEF2/A68F3EC9-3FCF-4E3D-932E-D9167AEA6E13/pluginData/4B9D11B4-FF7C-46E8-88F3-6902373C3143/default.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAYRUKYC4IE6VKSVWF%2F20220526%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220526T001843Z&amp;X-Amz-Expires=86400&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEK7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDlMczAHnFOpUcR%2BR2BRuQlIum4B7tFEn%2BrAxTDxF188AIhAO7BZnw%2B4JhkBdM5E3LstZArQLzDqgxRr08%2BAnxQ%2F56wKoAECJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQABoMNTg3NjI3NzYzNDcyIgwjUN4I1M8KDDitD3kq1APRuDR8tM5fJVYX3mMLQPl%2FHAtQtvq%2FEw6UUlAD6eFGeddT6nW1oLX10NBVW7isUywyJlj9OBRC%2FHLAnrsgGADlROXanOkPmvM0Xh2S6sV20qW10eQ53M4NdWYJ4%2BeLksY5FHPLLYELP86b3LlHa%2F5iobCIzgdOywxEMlHndXLO0PMCK7qKyfBzucPzGpsPJ13fcCxuYVCMTxqKh5gcPEEdkiLfhLWKdEMbGUIQYtAdg4vxOemQ8PYf8F4yjY%2BpJYox1IvKEUN%2BdtZ5q4tqdldr4xhqvNHu4c2nAd6mpVtqDuRv6Y3ekbZqtGx1hjFlXq4Hc4JhkRR9LpNniPlle29d71yO9UxoZisj9JBMz3zfWuZaaCBhybsQrdhOmUEw0cavZxdXdnjhqfkQLXhwTxVtovJZb6lDr8zKt%2F%2BUUbSLkhXVwYCUdybNrLcsYD96QgnF4oRTCpCmWiPcRYefsN4yKJOQZEVYobMIcBzmATChtMu57U75WVT53BM9%2F0MhCQkDixuvrGYL0NkDsYHavOxRDpSZR%2BxK4i29ZUC9nkQyS71ul5MootYRu8BofyGH23PAeV4kScV2gnzAjkx8M%2BX%2FQd%2BfsW9PXF2LLT1tSI9xYucDP5Iws8G6lAY6pAH0sC%2FAJeUZRoT1oRQ4E%2Ffw5VeEx1jFl7cleqOdvqbcylYUFFlxF6DtecIejcGCIXw9VdjgYnLInbRZADqem5Gvz1AcHjeMayBmtxy%2FaDKr7ELLPYAJgVfA7mbIIkbzffevb76GjfgWjzmxObm8PjoBp7TRo%2BFlqdX1UIGJlXCYFa5Oi8W2ZPB8bauh9Uf4YPwFrKA2KVncy%2FPuvWB9dNT2yNvSAw%3D%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=26587c00fe91fa77036aef8ce031a95d328d9b750fefd5413e0c6c28e31ca6e9 did not exist. HTTP 404. Content: &lt;?xml version="1.0" encoding="UTF-8"?&gt;
E               &lt;Error&gt;&lt;Code&gt;NoSuchKey&lt;/Code&gt;&lt;Message&gt;The specified key does not exist.&lt;/Message&gt;&lt;Key&gt;spaces/658B0ABB-DA53-496D-9FE5-E0631CA5DEF2/A68F3EC9-3FCF-4E3D-932E-D9167AEA6E13/pluginData/4B9D11B4-FF7C-46E8-88F3-6902373C3143/default.zip&lt;/Key&gt;&lt;RequestId&gt;JP3QNCQ0HBS62VJB&lt;/RequestId&gt;&lt;HostId&gt;bVPaRcNnaakvI8/3cc4UYhL7CC4Slyj2qa2FvcGVAsJcpg7MAmWic5J4uEVv6f1+xDVRcmNCuPc=&lt;/HostId&gt;&lt;/Error&gt;

../../../../src/steamship/utils/signed_urls.py:31: SteamshipError</failure></testcase><testcase classname="tests.tests.plugin.integration.test_e2e_tsv_blockifier" name="test_e2e_tsv_blockifier_plugin" time="31.359" /></testsuite></testsuites>