<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="65.378" timestamp="2022-05-25T20:45:24.135622" hostname="Steamship.local"><testcase classname="tests.tests.plugin.integration.test_e2e_trainable_tagger" name="test_e2e_trainable_tagger_lambda_training" time="65.237"><failure message="steamship.base.error.SteamshipError: The file at signed URL https://steamship-spaces-staging.s3.us-west-2.amazonaws.com/spaces/658B0ABB-DA53-496D-9FE5-E0631CA5DEF2/C6A4277F-3312-42B2-8D22-26A6A4D67E69/pluginData/E94D1E72-4924-4C08-A2CE-9AA2CFC3849F/default.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAYRUKYC4IJADECYU4%2F20220526%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220526T004628Z&amp;X-Amz-Expires=86400&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEK7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCs4Gd%2FYBTp2x5KtTxq5Q9ViuHsXm5tb2EoGIKmJunTswIhAKQyn453Q%2BirbvtuCMcURL9oheAj1JMaBGZKo5wT9JqDKoAECJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQABoMNTg3NjI3NzYzNDcyIgzrsNi7W22TnApBaxoq1ANCDr9xSjjCnXcACJEI%2FYWGkpVJeqsmshX08yUsmEdLw6uKxx%2FiMCWkqkFKHVIAltE2mjWMOCoj41HAb3sJHZUKJbrNqz3Un7q5mq%2FTbjQYRsPdxrSLqOr5QZTfUmwOlY7uKSKCkdTzyWZ6LhBulGsncZfcwAsZOOsixNDnlJ5nSMl%2FaICMvXGiDKPmToiMS16GUrngXTI4uQveRRTl5c3j4LJ3HzJw%2FGBVaAZ%2FD8445SQZDq8YVhSqLbq2%2FstGJ3GnDZKZBaonQHe5J0nC0aKQLQ1Dzp8zdm2LjQIsInMk86krsZ%2FyP7DCsvgHH%2BdUcUtLV1hNxBRy8p7gFUbT57EmzFfK1EvOgDUNSUyiwKjcYyZR1kzWVGFyQ34JfBycaOs4IMGwV7Q3yWHw2RsA4ypjCRyk12V7p47gVWLXXWu%2FT0PtikBPEJhcq%2BavkbPhj9pmV0f2xSiwQMSxjXkoJYmcsc%2FXuxPDywQd5x2lZJGnOcq5VuFTnK%2FK%2F6p5wtZ%2F%2ByOU0NYOegspoWtdufrd69DnjTOslBS6x7zjDfohJKYXnnV8ck3aSM9aAWVlrSWlv7s4IDH3R4W4G3aFxV0mthcjDhmE07udPBSOIuuVwq%2BOhk7NchswssG6lAY6pAEbbX2EzNrLbu7v%2FaOv7D%2BW4PGT1pKglku5Y8eNZ2cl%2FqnxLBy5Rs6hpQRxnrMJ1kpHNCz1bov%2FuBrEo3HUEnSemDF21QUgq6COo437N21EhAsVMSHuv03ar1x5hmaYOUG%2F1ptiM3b1TuBYGu3Q5eTSBlBf%2BrDsnekJRcEpyqc%2F2CAybD22jyj9gIMaJXThvAf6xTemoZitgOfJIhYOYC644973yw%3D%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=5d5fe4a71766bb5df64c4ecb45b22522c5ba25a5e704775d8529f104bdad00e6 did not exist. HTTP 404. Content: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;Error&gt;&lt;Code&gt;NoSuchKey&lt;/Code&gt;&lt;Message&gt;The specified key does not exist.&lt;/Message&gt;&lt;Key&gt;spaces/658B0ABB-DA53-496D-9FE5-E0631CA5DEF2/C6A4277F-3312-42B2-8D22-26A6A4D67E69/pluginData/E94D1E72-4924-4C08-A2CE-9AA2CFC3849F/default.zip&lt;/Key&gt;&lt;RequestId&gt;7GNNM8CDNXVEVWZF&lt;/RequestId&gt;&lt;HostId&gt;xMr4+syVVQbAbBQOFZ0/D3Rm42GY00DKFp1fjrE3tLCFWewb0Nbi6jdkAcBLDFuWAoIQtrDExUY=&lt;/HostId&gt;&lt;/Error&gt;">client = Steamship(config=Configuration(api_key='2316C7EF-69BF-41E5-B315-33143129A483', api_base='https://api.staging.steamship...ging.steamship.com/', space_id='C6A4277F-3312-42B2-8D22-26A6A4D67E69', space_handle=None, profile=None), tasks=Tasks())

    def test_e2e_trainable_tagger_lambda_training(client: Steamship):
    
        version_config_template = dict(
            text_column=dict(type="string"),
            tag_columns=dict(type="string"),
            tag_kind=dict(type="string"),
        )
        instance_config = dict(text_column="Message", tag_columns="Category", tag_kind="Intent")
    
        exporter_plugin_r = PluginInstance.create(
            client=client,
            handle=EXPORTER_HANDLE,
            plugin_handle=EXPORTER_HANDLE,
            upsert=True,
        )
        assert exporter_plugin_r.data is not None
        exporter_plugin = exporter_plugin_r.data
        assert exporter_plugin.handle is not None
    
        csv_blockifier_path = PLUGINS_PATH / "blockifiers" / "csv_blockifier.py"
        trainable_tagger_path = PLUGINS_PATH / "taggers" / "plugin_trainable_tagger.py"
    
        # Make a blockifier which will generate our trainable corpus
        with deploy_plugin(
            client,
            csv_blockifier_path,
            "blockifier",
            version_config_template=version_config_template,
            instance_config=instance_config,
        ) as (plugin, version, instance):
            with upload_file(client, "utterances.csv") as file:
                assert len(file.refresh().data.blocks) == 0
                # Use the plugin we just registered
                file.blockify(plugin_instance=instance.handle).wait()
                assert len(file.refresh().data.blocks) == 5
    
                # Now make a trainable tagger to train on those tags
                with deploy_plugin(
                    client, trainable_tagger_path, "tagger", training_platform=HostingType.LAMBDA
                ) as (tagger, tagger_version, tagger_instance):
                    # Now train the plugin
                    training_request = TrainingParameterPluginInput(
                        plugin_instance=tagger_instance.handle,
                        export_request=ExportPluginInput(
                            plugin_instance=EXPORTER_HANDLE, type="corpus", handle="default"
                        ),
                        training_params=dict(
                            keyword_list=KEYWORDS  # This is a key defined by the test model we're training
                        ),
                    )
    
                    train_result = tagger_instance.train(training_request)
                    train_result.wait()
    
                    # At this point, the PluginInstance will have written a parameter file to disk. We should be able to
                    # retrieve it since we know that it is tagged as the `default`.
    
                    checkpoint = ModelCheckpoint(
                        client=client,
                        handle="default",
                        plugin_instance_id=tagger_instance.id,
                    )
&gt;                   checkpoint_path = checkpoint.download_model_bundle()

tests/plugin/integration/test_e2e_trainable_tagger.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../src/steamship/plugin/outputs/model_checkpoint.py:111: in download_model_bundle
    download_from_signed_url(download_resp.data.signedUrl, to_file=self.archive_path_on_disk())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

url = 'https://steamship-spaces-staging.s3.us-west-2.amazonaws.com/spaces/658B0ABB-DA53-496D-9FE5-E0631CA5DEF2/C6A4277F-3312...4973yw%3D%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=5d5fe4a71766bb5df64c4ecb45b22522c5ba25a5e704775d8529f104bdad00e6'
to_file = PosixPath('/var/folders/lg/s9f7mp_90v768ds8bsjq_sdm0000gn/T/tmpouopklt2/default.zip')

    def download_from_signed_url(url: str, to_file: Path = None) -&gt; Path:
        """
        Downloads the Signed URL to the filename `desired_filename` in a temporary directory on disk.
        """
        url = apply_localstack_url_fix(url)
        logging.info(f"Downloading: {url} to {to_file} in a temporary directory")
    
        resp = requests.get(url)
        if resp.status_code != 200:
            # TODO: At least Localstack seend to reply with HTTP 200 even if the file isn't found!
            # The full response contains:
            # &lt;Error&gt;
            #     &lt;Code&gt;NoSuchKey&lt;/Code&gt;
            # So we **could** check the response text even in the event of 200 but that seems wrong..
            if "&lt;Code&gt;NoSuchKey&lt;/Code&gt;" in resp.text:
&gt;               raise SteamshipError(
                    message=f"The file at signed URL {url} did not exist. HTTP {resp.status_code}. Content: {resp.text}"
                )
E               steamship.base.error.SteamshipError: The file at signed URL https://steamship-spaces-staging.s3.us-west-2.amazonaws.com/spaces/658B0ABB-DA53-496D-9FE5-E0631CA5DEF2/C6A4277F-3312-42B2-8D22-26A6A4D67E69/pluginData/E94D1E72-4924-4C08-A2CE-9AA2CFC3849F/default.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAYRUKYC4IJADECYU4%2F20220526%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220526T004628Z&amp;X-Amz-Expires=86400&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEK7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCs4Gd%2FYBTp2x5KtTxq5Q9ViuHsXm5tb2EoGIKmJunTswIhAKQyn453Q%2BirbvtuCMcURL9oheAj1JMaBGZKo5wT9JqDKoAECJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQABoMNTg3NjI3NzYzNDcyIgzrsNi7W22TnApBaxoq1ANCDr9xSjjCnXcACJEI%2FYWGkpVJeqsmshX08yUsmEdLw6uKxx%2FiMCWkqkFKHVIAltE2mjWMOCoj41HAb3sJHZUKJbrNqz3Un7q5mq%2FTbjQYRsPdxrSLqOr5QZTfUmwOlY7uKSKCkdTzyWZ6LhBulGsncZfcwAsZOOsixNDnlJ5nSMl%2FaICMvXGiDKPmToiMS16GUrngXTI4uQveRRTl5c3j4LJ3HzJw%2FGBVaAZ%2FD8445SQZDq8YVhSqLbq2%2FstGJ3GnDZKZBaonQHe5J0nC0aKQLQ1Dzp8zdm2LjQIsInMk86krsZ%2FyP7DCsvgHH%2BdUcUtLV1hNxBRy8p7gFUbT57EmzFfK1EvOgDUNSUyiwKjcYyZR1kzWVGFyQ34JfBycaOs4IMGwV7Q3yWHw2RsA4ypjCRyk12V7p47gVWLXXWu%2FT0PtikBPEJhcq%2BavkbPhj9pmV0f2xSiwQMSxjXkoJYmcsc%2FXuxPDywQd5x2lZJGnOcq5VuFTnK%2FK%2F6p5wtZ%2F%2ByOU0NYOegspoWtdufrd69DnjTOslBS6x7zjDfohJKYXnnV8ck3aSM9aAWVlrSWlv7s4IDH3R4W4G3aFxV0mthcjDhmE07udPBSOIuuVwq%2BOhk7NchswssG6lAY6pAEbbX2EzNrLbu7v%2FaOv7D%2BW4PGT1pKglku5Y8eNZ2cl%2FqnxLBy5Rs6hpQRxnrMJ1kpHNCz1bov%2FuBrEo3HUEnSemDF21QUgq6COo437N21EhAsVMSHuv03ar1x5hmaYOUG%2F1ptiM3b1TuBYGu3Q5eTSBlBf%2BrDsnekJRcEpyqc%2F2CAybD22jyj9gIMaJXThvAf6xTemoZitgOfJIhYOYC644973yw%3D%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=5d5fe4a71766bb5df64c4ecb45b22522c5ba25a5e704775d8529f104bdad00e6 did not exist. HTTP 404. Content: &lt;?xml version="1.0" encoding="UTF-8"?&gt;
E               &lt;Error&gt;&lt;Code&gt;NoSuchKey&lt;/Code&gt;&lt;Message&gt;The specified key does not exist.&lt;/Message&gt;&lt;Key&gt;spaces/658B0ABB-DA53-496D-9FE5-E0631CA5DEF2/C6A4277F-3312-42B2-8D22-26A6A4D67E69/pluginData/E94D1E72-4924-4C08-A2CE-9AA2CFC3849F/default.zip&lt;/Key&gt;&lt;RequestId&gt;7GNNM8CDNXVEVWZF&lt;/RequestId&gt;&lt;HostId&gt;xMr4+syVVQbAbBQOFZ0/D3Rm42GY00DKFp1fjrE3tLCFWewb0Nbi6jdkAcBLDFuWAoIQtrDExUY=&lt;/HostId&gt;&lt;/Error&gt;

../src/steamship/utils/signed_urls.py:31: SteamshipError</failure></testcase></testsuite></testsuites>